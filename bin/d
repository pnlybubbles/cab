#!/bin/sh

start () {
  echo 'starting container: '$1
  local opt=$2
  if [ ! -z $port ]; then
    opt=$opt' -p '$port
  fi
  local name=`echo $PWD | sed -e s#/#-#g | sed -e s/^-//`
  docker run \
    -v $host_pwd:/main \
    $opt \
    --name $name \
    --label cab.replica \
    --label cab.path="$host_pwd" \
    --rm \
    -itd \
    $1 \
    sh
}

execute () {
  docker exec \
    -it \
    $current_id \
    sh -c "cd /main && $*"
}

status() {
  replica_ids=`docker ps -q -f 'label=cab.replica'`
  docker inspect \
    --format '{{.Config.Hostname}} {{.State.Status}} {{.Config.Image}} {{index .Config.Labels "cab.path"}}' \
    $replica_ids
}

stop () {
  docker stop $current_id
}

host_home='/Users/pnlybubbles'
host_pwd=$host_home$PWD
current_id=`docker ps -q -f 'label=cab.path=/Users/pnlybubbles/cab/node/grimoire.gl'`

if [ -z $1 ]; then
  echo -e 'Usage: d [OPTIONS] [COMMAND]'
  echo -e
  echo -e 'Options:'
  echo -e '\t-i, --image [IMAGE]'
  echo -e '\t-p, --port [GUEST]'
  echo -e '\t-s, --status'
  echo -e '\t    --stop'
  return 0
fi

image=''
port=''
while :
do
  case $1 in
    '-i' | '--image' )
      shift; image=$1; shift
      ;;
    '-p' | '--port' )
      shift; port=$1; shift
      ;;
    '--stop')
      stop
      return 0
      ;;
    '-s' | '--status' )
      status
      return 0
      ;;
    * )
      break
      ;;
  esac
done

if [ ! -z $current_id ]]; then
  execute $*
else
  if [ ! -z $image ]; then
    start $image
  else
    case $1 in
      'node' | 'npm' | 'yarn' )
        start 'node:alpine' '-v /main/node_modules'
        ;;
      * )
        echo 'ERROR: Container is not running'
        return 1
        ;;
    esac
  fi
  execute $*
fi

return 0
