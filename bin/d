#!/bin/sh

start () {
  echo 'starting container: '$1
  local opt="$2"
  if [ ! -z $port ]; then
    if [ -z `echo $port | grep ':'` ]; then
      local used_ports=''
      if [ ! -z "$replica_ids" ]; then
        used_ports=`docker inspect \
          --format '{{range .NetworkSettings.Ports}}{{index (index . 0) "HostPort"}}{{end}}' \
          $replica_ids`
      fi
      local host_port='4000'
      while [ ! -z `echo $used_ports | grep $host_port` ]
      do
        host_port=`expr $host_port + 1`
      done
      port=$host_port':'$port
    fi
    opt=$opt' -p '$port
  fi
  local name=`echo $PWD | sed -e s#/#-#g | sed -e s/^-//`
  docker run \
    -v $host_pwd:/main \
    $opt \
    --name $name \
    --label cab.replica \
    --label cab.path="$PWD" \
    --rm \
    -itd \
    $1 \
    sh
  update_current
}

execute () {
  docker exec \
    -it \
    $current_id \
    sh -c "cd /main && $*"
}

status() {
  if [ ! -z "$replica_ids" ]; then
    docker inspect \
      --format '{{.Config.Hostname}} {{.State.Status}} {{.Config.Image}} {{range $i, $_ := .NetworkSettings.Ports}}{{index (index . 0) "HostPort"}}:{{$i}} {{end}} {{index .Config.Labels "cab.path"}}' \
      $replica_ids
  fi
}

stop () {
  docker stop $current_id
}

checkpoint () {
  local cid=$current_id
  if [ ! -z $1 ]; then
    cid=$1
  fi
  docker checkpoint create $cid "default__"
}

restore () {
  local cid=$current_id
  if [ ! -z $1 ]; then
    cid=$1
  fi
  docker start --checkpoint "__default" $cid
}

update_current () {
  current_id=`docker ps -qa -f "label=cab.path=$PWD"`
}

show_help() {
  echo 'Usage: d [OPTIONS] [COMMAND]'
  echo
  echo 'The specified [COMMAND] will be executed in the suitable container'
  echo
  echo 'Options:'
  echo '\t-i, --image [IMAGE]  Run [COMMAND] with specified [IMAGE]'
  echo '\t-p, --port [GUEST]   Attach port [GUEST] to vacant port in host'
  echo '\t-s, --status         Show detail of running containers'
  echo '\t    --stop           Stop container on current directory'
  echo '\t-c, --checkpoint     Suspend container (CRIU)'
  echo '\t-r, --restore        Resume container (CRIU)'
  echo '\t-h, --help           show this'
}

host_home='/Users/pnlybubbles'
host_pwd=$host_home$PWD
current_id=''
replica_ids=`docker ps -qa -f 'label=cab.replica' | tr '\n' ' '`
update_current

if [ -z $1 ]; then
  show_help
  return 0
fi

image=''
port=''
while :
do
  case $1 in
    '-i' | '--image' )
      shift; image=$1; shift
      ;;
    '-p' | '--port' )
      shift; port=$1; shift
      ;;
    '--stop')
      shift; stop
      return 0
      ;;
    '-s' | '--status' )
      shift; status
      return 0
      ;;
    '-c' | '--checkpoint' )
      shift; checkpoint $1; shift
      return 0
      ;;
    '-r' | '--restore' )
      shift; restore $1; shift
      return 0
      ;;
    '-h' | '--help' )
      shift; show_help;
      return 0
      ;;
    * )
      break
      ;;
  esac
done

if [ ! -z $current_id ]; then
  execute $*
else
  if [ ! -z $image ]; then
    start $image ''
  else
    case $1 in
      'node' | 'npm' | 'yarn' )
        start 'node:alpine' '-v /main/node_modules'
        ;;
      'cabal' | 'ghc' | 'ghci' | 'stack' )
        start 'haskell:latest' ''
        ;;
      'rustc' | 'rust-gdb' | 'rust-lldb' | 'cargo' )
        start 'scorpil/rust:nightly' ''
        ;;
      'ruby' | 'bundle' )
        start 'ruby:latest' ''
        ;;
      * )
        echo 'ERROR: Container is not running'
        echo
        show_help
        return 1
        ;;
    esac
  fi
  execute $*
fi

return 0
